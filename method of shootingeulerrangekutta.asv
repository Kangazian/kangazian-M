%Boundary-value ODE
%this programm presented solution of T"-a^2T=-aTa
%exact solution
 clc
 clear all
format long;
Tc=0;
T2=100;T1=0;
l=1;
a=4;
c=-(T2-T1*exp(l*a))/(-exp(a*l)+exp(-a*l))
d=(-T2+T1*exp(-a*l))/(exp(-a*l)-exp(a*l))
dx=0.125;
x(1,1)=0;
m=l/dx;
for i=1:m
x(i+1,1)=x(i,1)+dx;
end

% exactsolutionT(1,1)=0;
for i=1:m+1 
exactsolutionT(i,1)=c*exp(a*x(i,1))-d*exp(-a*x(i,1));
end
exactsolutionT

 %Shooting method
 %select the uo=7.5 and u1=12.5;
 %range-kutta solution
dx=0.125;
n=l/dx;

u=zeros(n+1,4);
Ta=zeros(n+1,4);
RangekuttaT=zeros(n+1,4);
u(1,1)=7.5;
 u(1,2)=12.5;
Ta(1,1)=0;
Ta(1,2)=0;
Ta(1,3)=0;
Ta(1,4)=0;

for i=1:n
            dt1=dx*u(i,1);

            du1=dx*16*(Ta(i,1));

            dt2=dx*(u(i,1)+0.5*du1);

            du2=dx*16*((Ta(i,1)+0.5*dt1));

            dt3=dx*(u(i,1)+0.5*du2);

            du3=dx*16*((Ta(i,1)+0.5*dt2));

            dt4=dx*(u(i,1)+du3);

            du4=dx*16*((Ta(i,1)+dt3));

            Ta(i+1,1)=Ta(i,1)+((1/6)*(dt1+(2*dt2)+(2*dt3)+dt4));
            U(i+1,1)=u(i,1)+((1/6)*(du1+(2*du2)+(2*du3)+du4));
         end       


for i=1:n
            
          dt1=dx*u(i,2);

            du1=dx*16*(Ta(i,2));

            dt2=dx*(u(i,2)+0.5*du1);

            du2=dx*16*((Ta(i,2)+0.5*dt1));

            dt3=dx*(u(i,2)+0.5*du2);

            du3=dx*16*((Ta(i,2)+0.5*dt2));

            dt4=dx*(u(i,2)+du3);

            du4=dx*16*((Ta(i,2)+dt3));

            Ta(i+1,2)=Ta(i,2)+((1/6)*(dt1+(2*dt2)+(2*dt3)+dt4));
            u(i+1,2)=u(i,2)+((1/6)*(du1+(2*du2)+(2*du3)+du4));

end
       slope=(Ta(n+1,2)-Ta(n+1,1))/(u(1,2)-u(1,1));
        u(1,3)=u(1,2)+((T2-Ta(n+1,2))/slope);
   
for i=1:n
            
            dt1=dx*u(i,3);

            du1=dx*16*(Ta(i,3));

            dt2=dx*(u(i,3)+0.5*du1);

            du2=dx*16*((Ta(i,3)+0.5*dt1));

            dt3=dx*(u(i,3)+0.5*du2);

            du3=dx*16*((Ta(i,3)+0.5*dt2));

            dt4=dx*(u(i,3)+du3);

            du4=dx*16*((Ta(i,3)+dt3));
            
            Ta(i+1,3)=Ta(i,3)+((1/6)*(dt1+(2*dt2)+(2*dt3)+dt4));
            u(i+1,3)=u(i,3)+((1/6)*(du1+(2*du2)+(2*du3)+du4));

end
slope=(Ta(n+1,3)-Ta(n+1,2))/(u(1,3)-u(1,2));
        u(1,4)=u(1,3)+((T2-Ta(n+1,3))/slope);

for i=1:n
            
           dt1=dx*u(i,4);

            du1=dx*16*(Ta(i,4));

            dt2=dx*(u(i,4)+0.5*du1);

            du2=dx*16*((Ta(i,4)+0.5*dt1));

            dt3=dx*(u(i,4)+0.5*du2);

            du3=dx*16*((Ta(i,4)+0.5*dt2));

            dt4=dx*(u(i,4)+du3);

            du4=dx*16*((Ta(i,4)+dt3));
           
            Ta(i+1,4)=Ta(i,4)+((1/6)*(dt1+(2*dt2)+(2*dt3)+dt4));
            u(i+1,4)=u(i,4)+((1/6)*(du1+(2*du2)+(2*du3)+du4));

end

RangekuttaT=Ta(:,4)
%oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo
%ooooooooooooooooooooShooting method by explicit Eulerooooooooooooooooooooo
%oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo

k=4;
m=l/dx;
u(1,2)=12.5;
u(1,1)=7.5;
Ta(1,1)=0;
for j=1:k-1
    Ta(1,j)=0;
    if j>2
             slope=(Ta(m+1,j-1)-Ta(m+1,j-2))/(u(1,j-1)-u(1,j-2));
            u(1,j)=u(1,j-1)+((T2-Ta(m+1,j-1))/slope);
        for i=1:m       
             if abs(Ta(i,j)-T2)< 0.001 
               explicitsolutionT=Ta(i,j);
               p=j;
               break
            end  
            Ta(i+1,j)=Ta(i,j)+dx*u(i,j);
            u(i+1,j)=u(i,j)+16*dx*Ta(i+1,j);
        end
     end
 if j<=2
 for i=1:m     
     Ta(i+1,j)=Ta(i,j)+dx*u(i,j);
            u(i+1,j)=u(i,j)+16*dx*Ta(i+1,j);      
        end
    end
    
end
explicitsolutionT=Ta(:,3)

% explicitsolution
%oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo
%oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo
%ooooooooooooooooooooShooting method by implicit Eulerooooooooooooooooooooo
%oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo
k=4;
m=l/dx;
u(1,2)=12.5;
u(1,1)=7.5;
Tb(1,1)=0;
for j=1:k-1
   Tb(1,j)=0;
    if j>2
   slope1=(Tb(m+1,j-1)-Tb(m+1,j-2))/(u(1,j-1)-u(1,j-2));
   u(1,j)=u(1,j-1)+((T2-Tb(m+1,j-1))/slope1);
   for i=1:m
      if abs(Tb(i,j)-T2)< 0.0001 
              implicitsolutionTb=Tb(i,j);
              break
            end     
         Tb(i+1,j)=(Tb(i,j)+u(i,j)*dx)/(1-16*(dx^2));
        u(i+1,j)=u(i,j)+16*dx*Tb(i+1,j);
        end
    end
       if j<=2
 for i=1:m     
       Tb(i+1,j)=((Tb(i,j)+u(i,j)*dx)/(1-16*(dx^2)));
        u(i+1,j)=(u(i,j)+16*dx*Tb(i,j))/(1-16*(dx^2));
        end
    end
    
end
implicitsolutionTb=Tb(:,3)
%oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo
%oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo
%ooooooooooooooooooooThe equilibrium (Boundary-Value)Methodooooooooooooooo
%oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo
dx=0.125;
f=l/dx;
equilibrhiumsolution=zeros(f+1,1);
equilibrhiumsolution(f+1,1)=100;
equilibrhiumsolution(1,1)=0;
for j=1:f-1
    for i=1:f-1
        if i==j
            g(i,j)= -(2+16*dx^2);
%         g(f+1,f+1)=-(2+16*dx^2);
        end
if i==j+1
g(j+1,j)=1;
            g(j,j+1)=1;
        end;
         if i<j&i>j
        g(i,j)=0;
         end;
         end;
end;

for j=1:f-1
    if j==f-1
    s(f-1,1)=-100;
    s(1,1)=T1;
    end;
%     if 1<j<f-1 
%         s(j,1)=0;
% end;
end;
g;
s;
equilibrhiumT=inv(g)*s;

for i=2:f
  
equilibrhiumsolution(i,1)=equilibrhiumT(i-1,1);
     
end;
equilibrhiumsolution

% figure,hold on;
% 
% plot(exactsolutionT,'r')
% plot(RangekuttaT,'b' )
% plot(explicitsolutionT,'g')
% plot(implicitsolutionTb,'c')
% plot(equilibrhiumsolution,'k')
% legend('Exact','Rang','Explicit','implicit','equi')




